[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A Tour of Machine Learning Tools",
    "section": "",
    "text": "Many of us nowadays own a wide range of genuinely powerful computers. Smart Speakers, Mobile Phones, Gaming Consoles and Laptops and Desktops are extremely capable machines that can run software and algorithms that were in the realms of science fiction not very long ago. The increase in computing power has facilitated an expansion in the class of algorithms known as machine learners. These algorithms are part of the general field of Artificial Intelligence (AI). AI is roughly the ability of machines to make demonstrate intelligence, such as making decisions or learning skills or solving problems for which no explicit protocol is given. We are often introduced to AI by films and science fiction and it is generally seen to be a thing to be feared or exploited.\n\n\n\n\n\nSome AI, yesterday.\n\n\n\n\nBut the aspects of AI in machine learning algorithms that we have today are extremely useful in helping us to make sense of data. Because machine learning is concerned with algorithms that improve through experience and by learning from data, they can help us to see patterns and connections in data that we would not be able to see ourselves. Essentially by performing many calculations machine learning algorithms can help us to find structure or divisions in data, perform classifications, create simplifications of complex structures and make data based decisions. These are the algorithms that help us to make sense of the vast swathes of data that we generate in our daily lives and we can make use of them too to help us make sense of complex experimental data.\nIn this course we’ll tour the main classes of machine learning algorithm, with a focus on ones that are common in biological data analysis. This will not be a deep dive, though we will detail the workings of some at a high level. The objective is to tour the galaxy of ML and finish with an appreciation of how they can help and how you can start to make use of such mathematically complex and powerful tools in your research."
  },
  {
    "objectID": "03-unsupervised.html",
    "href": "03-unsupervised.html",
    "title": "1  Unsupervised Learning",
    "section": "",
    "text": "Questions\n\nHow can I find groups of similar things in data?\n\nObjectives\n\nUnderstand features and cases\nUnderstand hierarchical and k-means clustering\n\nKeypoints\n\nUnsupervised learning is finding groups in a data set without known examples\nThe number of cases we have should be greater than the number of features each case has\n\n\nIn this chapter we’ll take a look at unsupervised learning tools. This is a great place to start with ML as a biologist because, whether you know it or not, you’re actually already familiar with a good number of the principles in this field. Unsupervised learning is a form of data-driven ML. In these approaches we start off with a mish-mash of things that we have information about but we don’t know what any of them are. Are aim is to try and group the similar things together, and the different things apart."
  },
  {
    "objectID": "03-unsupervised.html#p-features-and-n-cases",
    "href": "03-unsupervised.html#p-features-and-n-cases",
    "title": "1  Unsupervised Learning",
    "section": "1.2 \\(p\\) Features and \\(n\\) Cases",
    "text": "1.2 \\(p\\) Features and \\(n\\) Cases\nWhen we talk about information that we know about things, we really mean the things we noted in the experiment. This ‘information’ can be diverse things including but not limited to a biological sequence, a set of physical measurements, some category values, or gene expression values. There are different types of ML tool for dealing with them all. In a very general sense, what ML tools work with is an \\(n \\times p\\) matrix of \\(n\\) cases and \\(p\\) features, the features \\(p\\) are the things we change and the cases \\(n\\) are the different items or individuals we measured the features on, here’s a basic example in which the presence of a feature is indicated by a 1 and it’s absence by 0.\n\n\n\n\n\nHere’s a gene expression based example, gene counts from an RNAseq experiment. The treatments are \\(p\\), the different genes are the \\(n\\)s\n\n\n\n\n\ngeneid\ntrt1\ntrt2\n\n\n\n\ngene1\n9.313663\n5.683347\n\n\ngene2\n16.824577\n12.921582\n\n\ngene3\n11.134654\n18.386286\n\n\ngene4\n18.245261\n13.271525\n\n\ngene5\n19.107009\n11.849221\n\n\n\n\n\nFinally, here’s a sequence based example\n\n\n\n\n\nid\nseq\n\n\n\n\ngene1\nTESVI\n\n\ngene2\nNESCI\n\n\ngene3\nTESNI\n\n\ngene4\nLEDVT\n\n\ngene5\nANDVI\n\n\n\n\n\nIn general ML tools need this to be true\n\\(n >> p\\)\n\\(n\\) must be much greater than \\(p\\). We must have many more cases than features we measured. Most ML tools will fail, or at least have reduced power when this isn’t true. This can be a limiting factor in our ability to use ML. Conversely, the power will generally go up when it is true and very large data sets can give extraordinary ML power."
  },
  {
    "objectID": "03-unsupervised.html#clustering",
    "href": "03-unsupervised.html#clustering",
    "title": "1  Unsupervised Learning",
    "section": "1.3 Clustering",
    "text": "1.3 Clustering\nThe first class of ML tools we will look it is unsupervised clustering, this will be familiar to many biologists from heatmaps of gene expression data, but also more fundamentally from phylogenetic tree analysis. We’ll look at a general overview before we look at some specific tools.\n\n1.3.1 The distance measure and matrix\nThe first step of clustering is to get a measure of ‘distance’ between all the pairs of cases \\(n\\)s that we have gathered. In this case when we say ‘distance’, we mean a numeric measure of how similar or dissimilar our cases are. There are lots of different metrics of distance, e.g the correlation coefficient \\(r\\) is a measure of how similar two sets of numbers are. With this measure the higher the value, the more similar the cases are. Different types of data will need different distance metrics. For sequence based data we typically have the substitution or edit distance (the number of changes needed to make the two sequences identical).\nThe distance measure is a crucial step in clustering, but all tools have a sensible default and we don’t need to worry about what it is exactly at this stage beyond what we’ve discussed, but we do need to see what we do with the pairs of distances to understand the basics of the algorithm. Once we have the distances we form a distance matrix, which is always square, symmetrical across the diagonal and looks like this:\n\n\n      gene1 gene2 gene3 gene4 gene5\ngene1  0.00  1.00  0.87  1.00  0.96\ngene2  1.00  0.00  0.77  1.00  0.99\ngene3  0.87  0.77  0.00  0.97  1.00\ngene4  1.00  1.00  0.97  0.00  0.99\ngene5  0.96  0.99  1.00  0.99  0.00\n\n\nAs we can see, the further apart the genes expression across the treatments the greater the distance measure. Once we have this matrix the clustering can begin."
  },
  {
    "objectID": "03-unsupervised.html#hierarchical-single-linkage-clustering",
    "href": "03-unsupervised.html#hierarchical-single-linkage-clustering",
    "title": "1  Unsupervised Learning",
    "section": "1.4 Hierarchical (single linkage) Clustering",
    "text": "1.4 Hierarchical (single linkage) Clustering\nHierarchical clustering is the most common and straightforward clustering algorithm. The elements (cases or \\(n\\)s) are formed into the distance matrix and the aim is to group the pair of elements with the smallest distance into one, then repeat, continuing until we run out of elements. We then move onto grouping the pairs and so on until there’s nothing left to group. Allison Horst demonstrates it better than I, so here’s the excellent illustrations she made that run through the process.\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\n\nHopefully this montage has clarified the overall process of grouping elements based on distance metrics calculated between all pairs. The question remains though, how can we do this in R?\n\n1.4.1 Hierarchical clustering in Base R\nThere is an hclust() function built into R we can use. Being part of the base distribution and not using any packages means that this function is a bit general and needs data in particular format. Specifically it needs a numbers only matrix or data frame of information - you’d need to remove all text information from the object - getting this in to shape is left as an exercise for the reader. You would end up with a matrix object looking something like this\n\n\n\n\ndata_mat\n\n           trt1      trt2\ngene1  9.313663  5.683347\ngene2 16.824577 12.921582\ngene3 11.134654 18.386286\ngene4 18.245261 13.271525\ngene5 19.107009 11.849221\n\n\nYou can the get clusters by creating the dist object with the dist function and the clusters with hclust() using the method single to apply the single linkage clustering we learned above. Then we can directly plot the dendrogram.\n\ndata_dist <- dist(data_mat, diag=TRUE)\nclusters <- hclust(data_dist, method=\"single\")\nplot(clusters)\n\n\n\n\nNote that the distance measure by default is euclidean which is a different way of computing distances than the \\(r\\) correlation coefficient we discussed earlier. euclidean is more commonly used, but it’s beyond the scope of this course to discuss distance measures in detail. More information on distance measures is freely available on Wikipedia.\n\n\n1.4.2 Clustered Heatmaps\nTypically you’ll want to make some sort of heatmap and have a tree or dendrogram of the clusters stuck on the side, rather than just have a cluster tree on its own. Again, base R has a helpful if general function, heatmap(), simply pass the matrix object e.g data_mat and it can do the rest.\n\nheatmap(data_mat)\n\n\n\n\nThe function has a lot of customisation options, which you can investigate using ?heatmap and Google!\n\n\n1.4.3 Extra Credit: ggplot and clusters\nHeatmaps can be drawn in ggplot using the geom_tile() geom. If our data are in ‘tidy’ format like this\n\n\n\n\ntidy_gdf\n\n# A tibble: 10 × 3\n   geneid treatment expression\n   <chr>  <chr>          <dbl>\n 1 gene1  trt1            9.31\n 2 gene1  trt2            5.68\n 3 gene2  trt1           16.8 \n 4 gene2  trt2           12.9 \n 5 gene3  trt1           11.1 \n 6 gene3  trt2           18.4 \n 7 gene4  trt1           18.2 \n 8 gene4  trt2           13.3 \n 9 gene5  trt1           19.1 \n10 gene5  trt2           11.8 \n\n\nWe can make a heatmap quite simply, like this\n\nlibrary(ggplot2)\nhmap <- ggplot(tidy_gdf) + aes(treatment, geneid) + geom_tile(aes(fill=expression))\nhmap\n\n\n\n\nBut this has no dendrogram and is not clustered! It’s going to take a little fiddling to add this on - we can get the clusters out of the hclust() result and apply those. To do that we must solve another problem first - turning our tidy data into a matrix! That can be done with pivot_wider() from tidyr, which gets us most of the way there.\n\nlibrary(tidyr)\nwide_gdf <- tidy_gdf %>% pivot_wider(\n  id_cols = \"geneid\", \n  names_from=\"treatment\", \n  values_from=\"expression\")\nwide_gdf\n\n# A tibble: 5 × 3\n  geneid  trt1  trt2\n  <chr>  <dbl> <dbl>\n1 gene1   9.31  5.68\n2 gene2  16.8  12.9 \n3 gene3  11.1  18.4 \n4 gene4  18.2  13.3 \n5 gene5  19.1  11.8 \n\n\nAnd we can now remove the non-numeric columns and do the cluster\n\ndata_mat <- wide_gdf %>% \n  select(-geneid) %>% \n  as.matrix()\n\nclusters <- hclust(dist(data_mat, diag=TRUE))\n\nWe can reorder the axis in our ggplot heatmap using the order from the clusters object to put the geneids into the right order\n\nclusters$order\n\n[1] 1 3 5 2 4\n\nhmap + scale_y_discrete(limits= wide_gdf$geneid[clusters$order] )\n\n\n\n\nThe ggdendro package allows us to create a dendrogram from a clustering\n\nlibrary(ggdendro)\ndendro <- ggdendrogram(clusters) + coord_flip() + theme_dendro()\ndendro\n\n\n\n\nWe can compose the two plots with patchwork (cheekily moving the legend out of the way first).\n\nlibrary(patchwork)\nhmap + theme(legend.position=\"bottom\") +  dendro"
  },
  {
    "objectID": "03-unsupervised.html#k-means-clustering",
    "href": "03-unsupervised.html#k-means-clustering",
    "title": "1  Unsupervised Learning",
    "section": "1.5 K-Means clustering",
    "text": "1.5 K-Means clustering\nA limitation of hierarchical clustering is that we as the operator have to guess what elements are in which cluster and that can be a bit arbitrary. An alternative algorithm, the K-means cluster gets around this problem by allowing us to specify the number of clusters up-front and works from there. It starts with the assumption that there are k clusters and makes k random cluster start points (centroids) then tries to assign cases (elements/observations) to one of each centroid based on the distance from the start points. The assignment to clusters is improved iteratively by starting again with the centroid at the mean point in each cluster and continues until no improvements are made. Again, Allison Horst has drawn some great guides\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\n\n\n1.5.1 Figure of Merit\nA limitation of this approach and of hierarchical clustering is that we may not know how many k clusters there are. The Figure of Merit (FOM) technique can help us work out the k that we need. Briefly, this works by trying a k-means clustering at 1, then 2, then 3 up to a stopping number of clusters and at the end of each clustering we check the distance variability between the centroids and the elements/cases/observations. The value of k that minimises the distance is the value that we want to use as most points are near to a cluster centroid.\nLet’s walk through the process of doing FOM and then applying a k-means clustering.\n\n\n\nHere’s a sample data set to try and cluster, we’re going to cluster the rows. Note how it resembles a gene expression matrix with the gene names as the matrix row names, not in the data itself.\n\nhead(gene_exprs, n=3)\n\n     sample1  sample2  sample3\ngn1 4.516471 3.722275 15.52375\ngn2 1.451247 3.225752 15.21140\ngn3 3.584614 3.020616 15.40538\n\n\nWe’ll use the factoextra package to do the FOM and the subsequent k-means. First the FOM using fviz_nbclust()\n\nlibrary(factoextra)\nfviz_nbclust(gene_exprs, kmeans, method=\"wss\")\n\n\n\n\nThe option method lets us specify which method we want to use to estimate the variability, here we use wss for within sum of squares, which is a reasonable one. The resulting plot shows that wss improves lots until we get to 3 clusters, at which point there is only minimal improvement. We interpret this as meaning that there are 3 clusters within our data. We can use that to make our k-means cluster. The kmeans() function does this easily and we can plot the result using the fviz_cluster() function.\n\nkm_clus <- kmeans(gene_exprs, 3, nstart=25, iter.max = 1000)\nfviz_cluster(km_clus, data=gene_exprs)\n\n\n\n\nThe plot shows clearly the elements of the data are clustered into 3 groups. The km_clus object contains information about the elements cluster membership if you wish to extract that for any reason.\n\n\n\n\n\n\nRoundup\n\n\n\n\nUnsupervised learning algorithms group things based on distances computed between them.\nHierarchical and k-means are two common and useful methods."
  },
  {
    "objectID": "04-supervised.html",
    "href": "04-supervised.html",
    "title": "2  Supervised Learning",
    "section": "",
    "text": "Questions\n\nHow can I find items in data that are like things I already know about?\n\nObjectives\n\nUnderstand labelled data and classification\nUnderstand training and test data\nUnderstand K nearest neighbours and Random Forest\n\nKey Points\n\nSupervised learning is classifying cases or elements based on examples that we already know\nGood training data is key\nDon’t mix test and training data\n\n\nIn this chapter we’ll take a look at supervised learning tools. It’s called supervised learning because we have a set of data that we have already classified into one or more groups and the algorithms use that as guide and try to fit some other unknown data into the groups we’ve specified, so the classification is supervised in the sense that there are known examples of the groups. Again the input data is usually a data matrix of some features, like measurements or gene expression values."
  },
  {
    "objectID": "04-supervised.html#labelled-data",
    "href": "04-supervised.html#labelled-data",
    "title": "2  Supervised Learning",
    "section": "2.2 Labelled Data",
    "text": "2.2 Labelled Data\nFor supervised learning algorithms we need to give examples of our categories. This is called labelling the data. And in most cases we can achieve this just by extending our \\(np\\) features/cases data matrix by one column and add a label in there, usually as a number. For our animal matrix example that would look like this if we wanted to label our data as a cat or not.\n\n\n\n\n\nThe object for the learning algorithm is then to guess labels for data that we don’t know beforehand. So in our animal matrix example, that looks like this"
  },
  {
    "objectID": "04-supervised.html#training-and-testing",
    "href": "04-supervised.html#training-and-testing",
    "title": "2  Supervised Learning",
    "section": "2.3 Training and Testing",
    "text": "2.3 Training and Testing\n\n2.3.1 The Training Phase\nMost supervised learning algorithms have an initial training phase. Training is a part of the procedure where the algorithm creates a model - an internal representation of the data and the associated categories or groups - that it can later use to tell which of our categories a new observation or case belong to. Each type of supervised learner has a different approach to training.\n\n\n2.3.2 The Testing Phase\nOnce we have a trained model we must evaluate its accuracy. If we can’t tell how accurate the model is, then we can’t trust it’s predictions and there is not point proceeding. We can test the model on data that we know the labels of but that the model hasn’t seen before. The testing phase is crucial and it is imperative that we don’t use the same data for testing that we used for training, doing so would be like giving a student the answers before the test. The accuracy would be artificially high as they’d already seen the right answers. Once we have a good test of the model done we can use it. Ideally, we’d want the model to give high accuracy, but that can be subjective. For some applications we might need 99% or greater accuracy, in others just getting an answer better than random would do."
  },
  {
    "objectID": "04-supervised.html#measuring-accuracy",
    "href": "04-supervised.html#measuring-accuracy",
    "title": "2  Supervised Learning",
    "section": "2.4 Measuring accuracy",
    "text": "2.4 Measuring accuracy\nMeasuring accuracy of a model in the testing phase is less straightforward than we might first think We might assume that all we have to do is count the number of test cases that we got correct, but that is only one quarter of the story at best!. In fact, for a binary classification (a model that knows only two groups, e.g in our animal example a model that can say whether it thinks something is or isn’t a cat) there are two ways to be right and two ways to be wrong and we must calculate as many of these we can in order to get a good accuracy estimate. For a model with more than two groups or for models trying to predict a quantity rather than a group the question is more complicated and we’ll look at those later.\n\n2.4.1 Two ways to be right: True Positives and True Negatives\nThe two ways to be right are to get a correct positive classification - a True Positive and a correct negative classification - a True Negative. These are easier to understand graphically. In the figure below we have a set of trained model generated answers and their true classes.\n\n\n\n\n\nA True Positive occurs when the model classifies a case positively (is a cat) and is correct, similarly a True Negative occurs when the model classifies a case negatively (is not a cat) and is correct.\n\n\n2.4.2 Two ways to be wrong: False Postive and False Negatives\nThe two ways to be wrong are False Positive and false negative classifications False Positives and False Negatives. A False Positive occurs when the model classifies a non-cat as a cat and a False Negative occurs when the model classifies a cat as not a cat.\n\n\n\n\n\n\n\n2.4.3 Sensitivity and Specificity\nFor a given set of test data for which we know the true labels, we run the model and get it’s classifications. We can count up the True/False Positive/Negatives and calculate two quantities Sensitivity and Specificity. Sensitivity tells us roughly what proportion of True Positives we got, given the errors and Specificity tells how few wrong calls we made. The two measures are therefore complementary and are used together to get a picture of how well the model performs. A good model is high in both. The quantities are calculated as follows\n\\(Sensitivity = \\frac{TP}{TP+FN}\\) \\(Specificity = \\frac{TN}{TN+FP}\\)\n\n\n2.4.4 Other measures of accuracy\nThere are in fact, many other measures of accuracy in use beyond sensitivity and specificity. These include things called \\(F\\) scores, precision and recall, FDRs and (confusingly) one actually called accuracy. It’s important to know that they are all a bit different and give different measures but they all try to capture the ‘rightness’ or ‘accuracy’ of our classifiers. As we try out different tools we will see other measures."
  },
  {
    "objectID": "04-supervised.html#k-nearest-neighbours",
    "href": "04-supervised.html#k-nearest-neighbours",
    "title": "2  Supervised Learning",
    "section": "2.5 \\(k\\)-Nearest Neighbours",
    "text": "2.5 \\(k\\)-Nearest Neighbours\nThe \\(k\\)-Nearest Neighbour algorithm is a multi-class capable classification algorithm. Like the unsupervised methods this relies on distance measures between cases/elements and tries to apply a class to an unknown element by looking at the number of nearest neighbours classes. Roughly, the unknown case gets the class of the majority of the \\(k\\) nearest neighbours. We can see an example in the figure below\n\n\n\n\n\nIf we set \\(k\\) to be 5 then Unknown case A has 3 orange squares and 2 red circles in its 5 nearest neighbours, so unknown case A would be classified as an orange square. Similarly, unknown case B has more green triangles in its \\(k\\) nearest neighbours so it gets classified as a green triangle. Note how the known class labels are crucial in putting the unknown cases into classes. This approach only works because we have some known examples. Also note how much harder the algorithm would find the task if there were too few examples of each class. For this and many other types of supervised learning algorithm, the more training data we have, the better.\n\n2.5.1 Training and evaluating \\(k\\)NN\nLet’s run through using the algorithm with the data below. The first phase is training and evaluation. There are 3 sets we will use, a training set of 55 points, which is labelled in a separate vector (train_data and train_labels), a test set of 20 points that is labelled (test_data and test_labels) and an unlabelled, unknown data set of 75 points that we wish to label using \\(k\\) Nearest Neighbours.\n\n\n\n\ndplyr::glimpse(train_data)\n\nRows: 55\nColumns: 4\n$ measure1 <dbl> 6.7, 5.4, 6.4, 5.0, 5.3, 5.4, 5.4, 5.7, 6.0, 5.1, 6.0, 5.8, 4…\n$ measure2 <dbl> 3.1, 3.4, 3.2, 3.2, 3.7, 3.9, 3.0, 4.4, 2.9, 3.8, 2.2, 2.6, 3…\n$ measure3 <dbl> 5.6, 1.7, 5.3, 1.2, 1.5, 1.7, 4.5, 1.5, 4.5, 1.9, 4.0, 4.0, 1…\n$ measure4 <dbl> 2.4, 0.2, 2.3, 0.2, 0.2, 0.4, 1.5, 0.4, 1.5, 0.4, 1.0, 1.2, 0…\n\ntrain_labels\n\n [1] C A C A A A B A B A B B A A B C C A A B A B B C A A A A C C B C B A B C C B\n[39] A A B C B C C A C B A A A B B C B\nLevels: A B C\n\ndplyr::glimpse(test_data)\n\nRows: 20\nColumns: 4\n$ measure1 <dbl> 5.6, 6.7, 6.3, 6.3, 5.0, 7.2, 6.2, 6.7, 4.6, 5.1, 6.0, 6.7, 7…\n$ measure2 <dbl> 3.0, 2.5, 3.3, 2.7, 2.3, 3.6, 2.2, 3.1, 3.4, 3.8, 2.2, 3.3, 3…\n$ measure3 <dbl> 4.1, 5.8, 6.0, 4.9, 3.3, 6.1, 4.5, 4.7, 1.4, 1.6, 5.0, 5.7, 6…\n$ measure4 <dbl> 1.3, 1.8, 2.5, 1.8, 1.0, 2.5, 1.5, 1.5, 0.3, 0.2, 1.5, 2.1, 2…\n\ntest_labels\n\n [1] B C C C B C B B A A C C C A A B A A B A\nLevels: A B C\n\ndplyr::glimpse(unknown_data)\n\nRows: 75\nColumns: 4\n$ measure1 <dbl> 5.6, 5.0, 6.3, 6.1, 5.8, 5.5, 5.1, 5.1, 7.2, 5.0, 4.7, 7.7, 5…\n$ measure2 <dbl> 2.9, 3.6, 2.8, 2.8, 2.7, 2.6, 3.8, 3.7, 3.0, 3.0, 3.2, 2.8, 3…\n$ measure3 <dbl> 3.6, 1.4, 5.1, 4.7, 5.1, 4.4, 1.5, 1.5, 5.8, 1.6, 1.6, 6.7, 1…\n$ measure4 <dbl> 1.3, 0.2, 1.5, 1.2, 1.9, 1.2, 0.3, 0.4, 1.6, 0.2, 0.2, 2.0, 0…\n\n\nThe first step is to train and test a model. As we are going to go through the process twice (one evaluating, one with unknown data), we must remember to control the random element of the algorithm. set.seed() with a consistent argument (123) puts the random number generator back to the same place each time allowing reproducibility.\nThe knn() function is in the class package so we load that and pass it the train_data to learn from and the known test_data to predict groups on. The cl parameter gets the vector of train_labels. Finally the \\(k\\) nearest neighbours is passed as k, here 9.\n\nset.seed(123)\nlibrary(class)\ntest_set_predictions <- knn(train_data, test=test_data, cl = train_labels, k=9)\ntest_set_predictions\n\n [1] B C C C B C B B A A B C C A A B A A B A\nLevels: A B C\n\n\nAs we can see, the predictions are returned as vector whose elements correspond to the rows of test_data. We can check the accuracy of the predictions by comparing the predictions with the known labels. The caret package function confusionMatrix() returns an object with lots of useful information.\n\nlibrary(caret)\nconfusionMatrix(test_set_predictions, test_labels)\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction A B C\n         A 7 0 0\n         B 0 6 1\n         C 0 0 6\n\nOverall Statistics\n                                          \n               Accuracy : 0.95            \n                 95% CI : (0.7513, 0.9987)\n    No Information Rate : 0.35            \n    P-Value [Acc > NIR] : 2.903e-08       \n                                          \n                  Kappa : 0.9251          \n                                          \n Mcnemar's Test P-Value : NA              \n\nStatistics by Class:\n\n                     Class: A Class: B Class: C\nSensitivity              1.00   1.0000   0.8571\nSpecificity              1.00   0.9286   1.0000\nPos Pred Value           1.00   0.8571   1.0000\nNeg Pred Value           1.00   1.0000   0.9286\nPrevalence               0.35   0.3000   0.3500\nDetection Rate           0.35   0.3000   0.3000\nDetection Prevalence     0.35   0.3500   0.3000\nBalanced Accuracy        1.00   0.9643   0.9286\n\n\nAt the top of the output, the confusion matrix shows how ‘mixed’ up the model got. Read it down the columns, so that for the 7 real group A the algorithm predicted 7 A, 0 B and 0 C; for the 6 real group B the algorithm predicted 0 A, 6 B and 0 C and for the 7 real group C the predictions were 0 A, 1 B and 6 C, so a C was misclassified as a B. This error rate and pattern is reflected in the overall accuracy, stated as 95 % and the more useful per group Sensitivity and Specificity, the lower Specificity for group B is due to the C miscalled as a B (so a false positive B). The same error causes the lower Sensitivity for group C.\n\n\n2.5.2 Using a trained model\nNow that we have evaluated the model and know how accurate it is - and that it is accurate enough to be useful, we can run on our unknown data. This is virtually identical to before, replacing the test_data with the unknown_data. We must remember to reset the random number generator again, and we can go ahead and add the predictions straight to the data frame if we wish. We now have predicted groups for the unknown data and an estimate of the accuracy of our predictions.\n\nset.seed(123)\nunknown_predictions <- knn(train_data, test=unknown_data, cl = train_labels, k=9)\nunknown_data$predicted_group <- unknown_predictions\ndplyr::glimpse(unknown_data)\n\nRows: 75\nColumns: 5\n$ measure1        <dbl> 5.6, 5.0, 6.3, 6.1, 5.8, 5.5, 5.1, 5.1, 7.2, 5.0, 4.7,…\n$ measure2        <dbl> 2.9, 3.6, 2.8, 2.8, 2.7, 2.6, 3.8, 3.7, 3.0, 3.0, 3.2,…\n$ measure3        <dbl> 3.6, 1.4, 5.1, 4.7, 5.1, 4.4, 1.5, 1.5, 5.8, 1.6, 1.6,…\n$ measure4        <dbl> 1.3, 0.2, 1.5, 1.2, 1.9, 1.2, 0.3, 0.4, 1.6, 0.2, 0.2,…\n$ predicted_group <fct> B, A, C, B, C, B, A, A, C, A, A, C, A, C, B, B, C, A, …"
  },
  {
    "objectID": "04-supervised.html#random-forest",
    "href": "04-supervised.html#random-forest",
    "title": "2  Supervised Learning",
    "section": "2.6 Random Forest",
    "text": "2.6 Random Forest\nRandom Forest is another supervised learning algorithm that is based on ensembles of decision trees. A decision tree is a model that resembles a question flowchart that has a ‘question’ at each branch point and continues until enough have been ‘asked’ to differentiate the item in hand. Here is one potential decision tree for the animal classification we’ve been using.\n\n\n\n\n\nIn a Random Forest classifier trees are made using the training data and the ones that are best at classifying the data are retained. There are a whole set of possible good trees so the ensemble of trees is used, hence Random Forest. The many trees make up one model that are used with unseen data.\n\n2.6.1 Building a Random Forest Model\nWe use the randomForest package to do this, and we will use the training and test data as we did with \\(k\\) nearest neighbours above, for random forest, the labels are specified in the data, so we don’t have a separate label vector and must now add them on to the training and test data. Let’s do that first\n\ntrain_data$group <- train_labels\ndplyr::glimpse(train_data)\n\nRows: 55\nColumns: 5\n$ measure1 <dbl> 6.7, 5.4, 6.4, 5.0, 5.3, 5.4, 5.4, 5.7, 6.0, 5.1, 6.0, 5.8, 4…\n$ measure2 <dbl> 3.1, 3.4, 3.2, 3.2, 3.7, 3.9, 3.0, 4.4, 2.9, 3.8, 2.2, 2.6, 3…\n$ measure3 <dbl> 5.6, 1.7, 5.3, 1.2, 1.5, 1.7, 4.5, 1.5, 4.5, 1.9, 4.0, 4.0, 1…\n$ measure4 <dbl> 2.4, 0.2, 2.3, 0.2, 0.2, 0.4, 1.5, 0.4, 1.5, 0.4, 1.0, 1.2, 0…\n$ group    <fct> C, A, C, A, A, A, B, A, B, A, B, B, A, A, B, C, C, A, A, B, A…\n\n\nWe can now build the model with the randomForest() function. The setup uses R’s formula based syntax, so is very similar to that we used for linear models. The group is to be predicted based on . which means all other columns in the data train_data. The model variable holds the trained model\n\nlibrary(randomForest)\nmodel <- randomForest(group ~ ., data = train_data, mtry=2)\n\n\n\n2.6.2 Testing a Random Forest model\nWith the model built we can use the generic predict() function to get the model to predict groups for the unlabelled test_data then compare it to the real groups with confusionMatrix(). Setting the value of type to class tells the predict() we want group classifications\n\ntest_set_predictions <- predict(model, test_data, type=\"class\")\nconfusionMatrix(test_set_predictions, test_labels)\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction A B C\n         A 7 0 0\n         B 0 6 1\n         C 0 0 6\n\nOverall Statistics\n                                          \n               Accuracy : 0.95            \n                 95% CI : (0.7513, 0.9987)\n    No Information Rate : 0.35            \n    P-Value [Acc > NIR] : 2.903e-08       \n                                          \n                  Kappa : 0.9251          \n                                          \n Mcnemar's Test P-Value : NA              \n\nStatistics by Class:\n\n                     Class: A Class: B Class: C\nSensitivity              1.00   1.0000   0.8571\nSpecificity              1.00   0.9286   1.0000\nPos Pred Value           1.00   0.8571   1.0000\nNeg Pred Value           1.00   1.0000   0.9286\nPrevalence               0.35   0.3000   0.3500\nDetection Rate           0.35   0.3000   0.3000\nDetection Prevalence     0.35   0.3500   0.3000\nBalanced Accuracy        1.00   0.9643   0.9286\n\n\nThe model is again, convincing and highly accurate so we can repeat use predict() with model to get predictions for unknown_data, and again add it to the data\n\nunknown_predictions <- predict(model, unknown_data, type=\"class\")\nunknown_data$predicted_group <- unknown_predictions\ndplyr::glimpse(unknown_data)\n\nRows: 75\nColumns: 5\n$ measure1        <dbl> 5.6, 5.0, 6.3, 6.1, 5.8, 5.5, 5.1, 5.1, 7.2, 5.0, 4.7,…\n$ measure2        <dbl> 2.9, 3.6, 2.8, 2.8, 2.7, 2.6, 3.8, 3.7, 3.0, 3.0, 3.2,…\n$ measure3        <dbl> 3.6, 1.4, 5.1, 4.7, 5.1, 4.4, 1.5, 1.5, 5.8, 1.6, 1.6,…\n$ measure4        <dbl> 1.3, 0.2, 1.5, 1.2, 1.9, 1.2, 0.3, 0.4, 1.6, 0.2, 0.2,…\n$ predicted_group <fct> B, A, C, B, C, B, A, A, C, A, A, C, A, C, B, B, C, A, …\n\n\n\n\n2.6.3 Random Forest with categorical predictors\nIn our \\(k\\)NN example and the previous Random Forest predictor, the input data features were solely numeric. Random Forest can handle a mixture of numeric and character or categorical based features allowing us to make classifications on more than numbers. The process is similar, so let’s get some appropriate data and do that\n\n\n\n\ndplyr::glimpse(train_data_mixed)\n\nRows: 55\nColumns: 6\n$ measure1 <dbl> 6.7, 5.4, 6.4, 5.0, 5.3, 5.4, 5.4, 5.7, 6.0, 5.1, 6.0, 5.8, 4…\n$ measure2 <dbl> 3.1, 3.4, 3.2, 3.2, 3.7, 3.9, 3.0, 4.4, 2.9, 3.8, 2.2, 2.6, 3…\n$ measure3 <dbl> 5.6, 1.7, 5.3, 1.2, 1.5, 1.7, 4.5, 1.5, 4.5, 1.9, 4.0, 4.0, 1…\n$ measure4 <dbl> 2.4, 0.2, 2.3, 0.2, 0.2, 0.4, 1.5, 0.4, 1.5, 0.4, 1.0, 1.2, 0…\n$ group    <fct> C, A, C, A, A, A, B, A, B, A, B, B, A, A, B, C, C, A, A, B, A…\n$ colour   <fct> White, Green, White, Green, Green, Green, Blue, Green, Blue, …\n\ndplyr::glimpse(test_data_mixed)\n\nRows: 20\nColumns: 6\n$ measure1 <dbl> 5.6, 6.7, 6.3, 6.3, 5.0, 7.2, 6.2, 6.7, 4.6, 5.1, 6.0, 6.7, 7…\n$ measure2 <dbl> 3.0, 2.5, 3.3, 2.7, 2.3, 3.6, 2.2, 3.1, 3.4, 3.8, 2.2, 3.3, 3…\n$ measure3 <dbl> 4.1, 5.8, 6.0, 4.9, 3.3, 6.1, 4.5, 4.7, 1.4, 1.6, 5.0, 5.7, 6…\n$ measure4 <dbl> 1.3, 1.8, 2.5, 1.8, 1.0, 2.5, 1.5, 1.5, 0.3, 0.2, 1.5, 2.1, 2…\n$ group    <fct> B, C, C, C, B, C, B, B, A, A, C, C, C, A, A, B, A, A, B, A\n$ colour   <fct> Blue, White, White, White, Blue, White, Blue, Blue, Green, Gr…\n\ndplyr::glimpse(unknown_data_mixed)\n\nRows: 75\nColumns: 6\n$ measure1 <dbl> 5.6, 5.0, 6.3, 6.1, 5.8, 5.5, 5.1, 5.1, 7.2, 5.0, 4.7, 7.7, 5…\n$ measure2 <dbl> 2.9, 3.6, 2.8, 2.8, 2.7, 2.6, 3.8, 3.7, 3.0, 3.0, 3.2, 2.8, 3…\n$ measure3 <dbl> 3.6, 1.4, 5.1, 4.7, 5.1, 4.4, 1.5, 1.5, 5.8, 1.6, 1.6, 6.7, 1…\n$ measure4 <dbl> 1.3, 0.2, 1.5, 1.2, 1.9, 1.2, 0.3, 0.4, 1.6, 0.2, 0.2, 2.0, 0…\n$ colour   <fct> Blue, Green, White, Blue, White, Blue, Green, Green, White, G…\n$ group    <fct> B, A, C, B, C, B, A, A, C, A, A, C, A, C, B, B, C, A, C, B, A…\n\n\nWe can see that there is a new categorical feature called colour in our train and test data, but not in our unknown data, so let’s try to predict the colour this time.\n\nmodel2 <- randomForest(colour ~ ., data = train_data_mixed, mtry=2)\n\ntest_set_mixed_predictions <- predict(model2, test_data_mixed, type=\"class\")\nconfusionMatrix(test_set_mixed_predictions, test_labels_mixed)\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction Blue Green White\n     Blue     6     0     0\n     Green    0     7     0\n     White    0     0     7\n\nOverall Statistics\n                                     \n               Accuracy : 1          \n                 95% CI : (0.8316, 1)\n    No Information Rate : 0.35       \n    P-Value [Acc > NIR] : 7.61e-10   \n                                     \n                  Kappa : 1          \n                                     \n Mcnemar's Test P-Value : NA         \n\nStatistics by Class:\n\n                     Class: Blue Class: Green Class: White\nSensitivity                  1.0         1.00         1.00\nSpecificity                  1.0         1.00         1.00\nPos Pred Value               1.0         1.00         1.00\nNeg Pred Value               1.0         1.00         1.00\nPrevalence                   0.3         0.35         0.35\nDetection Rate               0.3         0.35         0.35\nDetection Prevalence         0.3         0.35         0.35\nBalanced Accuracy            1.0         1.00         1.00\n\n\nSo we have created a model that is capable of perfectly predicting the value of the categoric value colour from a mixture of numeric and categoric features. Why is the model so accurate? It’s a bit of a fix! This sample data has a direct mapping between the group and the colour: A is always Green, B is always Blue and C is always White so it is easy to predict colour if you have group. The data aren’t typical in this sense but it does highlight the procedure.\n\n\n2.6.4 Random Forest Regression\nIt is also possible to perform prediction of numeric values and not just classes with Random Forest. We simply set up the model with a numeric value as the predicted value in the formula as follows\n\nmodel3 <- randomForest(measure1 ~ ., data = train_data_mixed, mtry=2)\n\nNow when we use predict() and omit the type argument, we get a set of numbers, not classes back\n\ntest_set_mixed_predictions_numeric <- predict(model3, test_data_mixed)\ntest_set_mixed_predictions_numeric\n\n      89      109      101      124       94      110       69       87 \n5.971972 6.240498 6.900242 6.008055 5.519931 6.887112 5.696763 6.220078 \n       7       47      120      125      118        1       15       96 \n5.036305 5.179204 5.836345 6.723473 6.890082 5.087420 5.108052 5.988062 \n      24       38       88       48 \n5.259467 5.011159 5.739434 4.832837 \n\n\n\n2.6.4.1 Evaluating numeric predictions\nPreviously we’ve evaluated predictions from our models for classes, counting True Positives etc, but we can’t do that here because we have no classes. Instead we can calculate how far away from the real value the predictions are on average. That’s a simple sum to do in R\n\nmean( (test_data_mixed$measure1 - test_set_mixed_predictions_numeric) ^ 2)\n\n[1] 0.1747463\n\n\nThe quantity is called the Mean Squared Error or MSE. The lower the better, though the actual size is dependent on context. The context here is the descriptive statistics of the known values for the test data, which we can get with summary()\n\nsummary(test_data_mixed$measure1)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   4.60    5.10    5.90    5.88    6.40    7.70 \n\n\nThese values range between 4.6 and 7.7, with 50% of them lying between 5.1 and 6.4. With that in mind it seems like an MSE of 0.17 is a pretty good result and we can conclude to predict accurately the values of measure1 from our Random Forest Regression model.\n\n\n\n\n\n\nRoundup\n\n\n\n\nSupervised Learning uses labelled data to make predictions on unseen data\nRandom Forest can predict classes and numeric values (perform regression)\nIt is imperative to evaluate the predictive model on a set of known cases"
  },
  {
    "objectID": "05-deep_learning.html",
    "href": "05-deep_learning.html",
    "title": "3  Deep Learning",
    "section": "",
    "text": "Questions\n\nWhat is Deep Learning?\nHow is Deep Learning distinct from classical Machine Learning?\n\nObjectives\n\nDiscuss how cryptic patterns can find their own important features in arbitrary data sets\nStudy the outline of training a Neural Network\nBuild and test a simple Neural Network\n\nKey Points\n\nDeep Learners find important features and patterns in the data automatically\nNeural Networks use optimised weights to learn classifications\nPower comes at the expense of interpretability"
  },
  {
    "objectID": "05-deep_learning.html#about-this-chapter",
    "href": "05-deep_learning.html#about-this-chapter",
    "title": "3  Deep Learning",
    "section": "3.1 About this chapter",
    "text": "3.1 About this chapter\nIn this chapter we’ll look at the latest advance in Machine Learning, a special set of extremely powerful techniques called Deep Learning. Deep learning methods are the ones that have been used in headline grabbing Artificial Intelligence toold from large scale facial recognition, data mining to influence voters on social media, voice recognition like Siri and Alexa, Netflix’s suggestion algorithm, Google’s advertising algorithm, and in science things like AlphaFold - the protein folding prediction tool and medical image analysis.\nThese tools and algorithms are a wide family of their own and have properties distinct from the machine learning techniques we’ve looked at so far, principally these types are able to select the most important features themselves and work out what is the most reliable data. They are also much more complicated in practice and much more dense so they become a black box and we are less able to interpret how they are making the decisions they make. This is the trade off we make when using Deep Learning."
  },
  {
    "objectID": "05-deep_learning.html#feature-selection-in-deep-learning",
    "href": "05-deep_learning.html#feature-selection-in-deep-learning",
    "title": "3  Deep Learning",
    "section": "3.2 Feature Selection in Deep Learning",
    "text": "3.2 Feature Selection in Deep Learning\nIn the previous tools we’ve looked at we used a \\(np\\) feature matrix, with \\(p\\) features - a column of data for each thing we measured. Feature selection is really important and can make or break the usefulness of a machine learning tool. If the features we select can’t differentiate between the classes, then the machine learning tool will never be able to make good predictions. Consider what it would be like if we tried to work out a person’s hair colour from their height! Height is an easy thing to measure but does it ever predict a person’s hair?\nSo we must pick our features carefully if we’re to make use of ML generally, but with Deep Learning the algorithms themselves work out which are the most useful features and also patterns within the features and preferentially use them. This leads to a bit of a kitchen sink approach, we can take all the features we like, pump them into a Deep Learning algorithm and let it decide the best way to use them. A practical upside of this then is that our \\(np\\) feature matrix can become very complicated and we can start to squeeze pretty much anything into the training data. We simply have to be able to encode it as numbers somehow."
  },
  {
    "objectID": "05-deep_learning.html#cryptic-patterns-in-deep-learning",
    "href": "05-deep_learning.html#cryptic-patterns-in-deep-learning",
    "title": "3  Deep Learning",
    "section": "3.3 Cryptic patterns in Deep Learning",
    "text": "3.3 Cryptic patterns in Deep Learning\nThe ability to automatically select features or patterns to use means that the algorithms can find and use patterns that we don’t specify explicitly and in fact don’t even know about. To understand this, let’s work through a protein sequence based example. Our first issue with biological sequences is the question of how to encode it as numbers. One common way of taking a categoric thing and making it numeric is to use ‘One Hot Encoding’. Which looks like this:\n\n\n\n\n\nThis encoding represents the protein sequence ‘ACDE’, the columns represent the alphabet of amino acids (in alphabetic order), the rows represent the position of sequence. We add a 1 at the intersection of the position and amino acid to show the amino acid at each position. Each row therefore has only one row.\nOnce we have an encoding, patterns will start to appear that the algorithms can use. Consider a protein motif, like RHLR - that would look like this in our one hot encoding.\n\n\n\n\n\nNow wherever the pattern crops up the algorithm will see it. The pattern can become associated with a particular class and used as part of the signal for classification. We didn’t have to say ‘protein has RHLR’, if it’s an important pattern and associated with a class or group then the algorithm will use it.\n\n3.3.1 Implications of Cryptic Patterns\nBeing able to select its own features and patterns means that the Deep Learning methods get a special sort of sensitivity. Considering our protein example again, then lots of properties of the proteins that are reliant on sequence at some level will be detectable and useable in some way by the Deep Learner. Things like physico-chemical sequence properties such as hydrophobicity are reliant on the actual amino acids to exist so they can be captured and used.\nAn important thing to note is that the patterns have only to be associated, not over-represented, on the whole. The Deep Learners might find a pattern that occurs only a few times in millions of example data, but if it is associated pretty uniquely with just one class or group then it can be used. This stands in contrast to typical methods of pattern finding in bioinformatics, which use majority or statistical over-representation. The patterns often have weight with other patterns and these associations increase the patterns power too.\nThe ability to find cryptic patterns and make associations is reliant on having a great deal of training data. Deep Learning methods do require lots more data than the ML methods we’ve already looked at and this can be a drawback in practice.\nDeep Learning models internal representations become very large and hard to interpret, so that actually understanding what they’re using to classify upon can become impossible. This is a significant trade off for the high power that we can get"
  },
  {
    "objectID": "05-deep_learning.html#neural-networks",
    "href": "05-deep_learning.html#neural-networks",
    "title": "3  Deep Learning",
    "section": "3.4 Neural Networks",
    "text": "3.4 Neural Networks\nThe core of most Deep Learning models and model types is the neural network, let’s run through how that works to gain some insight into how it gets its power.\n\n3.4.1 The Perceptron\nNeural networks are made up of units called Perceptrons, these are mathematical structures inspired by biological neurons. They take multiple inputs, integrate them in some way and produce an output. One that worked on our animal matrix might look like this\n\n\n\n\n\n\n\n3.4.2 The Network\nCombining lots of perceptrons results in a neural network and at a basic level might work with our animal data like this,\n\n\n\n\n\nMaking sense of all the integrations from the neural network, that is the calling of a class (in this case is_a_cat) is done by a decision function, here that may look like this\nif S > 2,\n    cat = 1\nelse \n    cat = 0\nApplied to the animal neural network the animal data classifications end up like this\n\n\n\n\n\nOnly one of the actual cats was correctly labelled. The clever part of the neural network is to apply weights to each of the features that modify the value they add to the neural network (in the figure below as blue values).\n\n\n\n\n\nWeights work to give the more useful features higher values (like meows) and less useful features lower values (like four legs). The network can now more accurately classify the animals in the picture.\n\n\n3.4.3 Neural Network Structure\nThe networks needn’t be restricted to simple structures in which the initial inputs go straight to the output, many layers of neurons can be made, each arbitrary numbers of neurons deep. These extra layers are called the hidden layers\n\n\n\n\n\nThe hidden layers increase the power of the neural network by allowing for further integration of information and extra weighting. But they also make the network more obscure and hard to read, again this is how the power of the neural network comes at the expense of interpretability.\n\n\n3.4.4 Training to find weights\nThe main part of training the neural network and the place it makes itself powerful is in the weight finding phase. This is called the learning or training phase. To do this the training algorithm goes back and forth across the network methodically adjusting the weights until it sees no further improvement when classifying on the training data - it is constantly comparing its current state against the answers in the training data.\n\n\n3.4.5 Neural network training phases are long and involved\nAs you can see there is a lot about neural networks to be specified and optimised. The number and depth of hidden layers that is optimal varies for each data set and there is no rule to follow as to what will be best. It is also not true that bigger is always better. The weights of the neural network must also be optimised for every data set, and we must be careful to use training data that is distinct from our test data to be confident in the generality of our resulting model. As a result of these considerations the training and testing phases of neural networks are particularly involved.\nWe won’t go through that whole procedure here, though you should be aware of it as it is the key to a truly useful deep learning model. But we will try out a small neural network in R."
  },
  {
    "objectID": "05-deep_learning.html#a-simple-neural-network-in-r",
    "href": "05-deep_learning.html#a-simple-neural-network-in-r",
    "title": "3  Deep Learning",
    "section": "3.5 A simple neural network in R",
    "text": "3.5 A simple neural network in R\n\n3.5.1 Frog Data\nIn this example we shall use some data on amphibian presence at various sites. Here’s a glimpse() of the train_rows, we also have a test_rows\n\n\n\n\ndplyr::glimpse(train_rows)\n\nRows: 94\nColumns: 20\n$ SR                 <dbl> 1000, 100, 200, 30000, 10050, 700, 50, 8000, 2500, …\n$ NR                 <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 2, 1, 1, 1, …\n$ TR                 <dbl> 1, 1, 5, 1, 1, 5, 1, 1, 1, 2, 1, 1, 1, 1, 14, 1, 14…\n$ VR                 <dbl> 3, 2, 1, 3, 2, 2, 2, 3, 3, 0, 1, 2, 3, 2, 3, 3, 1, …\n$ SUR1               <dbl> 2, 2, 10, 1, 1, 10, 2, 2, 10, 6, 2, 2, 2, 2, 7, 2, …\n$ SUR2               <dbl> 1, 7, 6, 1, 10, 6, 7, 10, 2, 9, 7, 7, 2, 10, 2, 2, …\n$ SUR3               <dbl> 9, 6, 10, 1, 6, 9, 10, 7, 6, 2, 6, 9, 1, 10, 1, 7, …\n$ UR                 <dbl> 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, …\n$ FR                 <dbl> 0, 0, 4, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, …\n$ OR                 <dbl> 100, 100, 75, 100, 100, 100, 100, 100, 100, 50, 100…\n$ RR                 <dbl> 2, 2, 1, 2, 5, 1, 5, 9, 0, 0, 0, 0, 5, 1, 5, 0, 5, …\n$ BR                 <dbl> 5, 2, 1, 10, 5, 1, 5, 9, 1, 0, 0, 0, 5, 5, 5, 1, 5,…\n$ MR                 <dbl> 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ CR                 <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ Green_frogs        <dbl> 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, …\n$ Brown_frogs        <dbl> 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, …\n$ Common_toad        <dbl> 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, …\n$ Tree_frog          <dbl> 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, …\n$ Common_newt        <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, …\n$ Great_crested_newt <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, …\n\n\nThese data are from (Blachnik, Sołtysiak, and Dąbrowska 2019) originally and you can see a description of the 20 columns at https://archive.ics.uci.edu/ml/datasets/Amphibians. Briefly, they are things like the presence and size and maintenance of reservoirs and the surrounding area, whether humans use the area, whether there is fishing. All potentially pertinent measurements. The presence of different types of amphibian species are recorded as 1 for present, and 0 for not present.\nWe could use a neural network to predict any of the species listed, but let’s work on predicting Green_frogs.\nWe’ll use the straightforward neuralnet() function in the neuralnet package for this. It can take an R formula specification, which as you’ll recall takes the form y ~ feature_1 + feature_2 ... where y is the thing to be predicted and feature_x are the features to input for prediction with. With 19 to enter, that’s lots of typing, so I’ve squashed it into a variable called long_formula\n\n\n\n\nlong_formula\n\nGreen_frogs ~ SR + NR + TR + VR + SUR1 + SUR2 + SUR3 + UR + FR + \n    OR + RR + BR + MR + CR + Green_frogs + Brown_frogs + Common_toad + \n    Tree_frog + Common_newt + Great_crested_newt\n\n\n\n\n3.5.2 Training a 3 hidden layer neural network\nWe can put the formula into the function neuralnet() specify the training data and the depth of the hidden layers. Here we’ll have 3, with 15, 10 and 5 neurons respectively.\n\nlibrary(neuralnet)\nnn <- neuralnet(long_formula, train_rows, hidden=c(15,10,5), linear.output=FALSE)\n\nThat single step builds the neural network, and trains it and gives it back to use so we can use it to make predictions with. Of course the first thing we want to make predictions on is our test set so we can evaluate the accuracy.\n\n\n3.5.3 Testing the neural network\nThe compute() function takes a neural network model and data and creates predictions. Here we feed it our test data. However when we look at the resulting predictions (stored in the net.result slot in our predictions object) we see something odd.\n\npredictions <- compute(nn, test_rows)\nhead(predictions$net.result)\n\n            [,1]\n[1,] 0.998154554\n[2,] 0.998147802\n[3,] 0.008503821\n[4,] 0.998154554\n[5,] 0.996971835\n[6,] 0.006267082\n\n\nThe predictions are not of classes, but are actually numbers that represent the level of sureness the model has that the site has Green Frogs. This value is sometimes useful, but we need to convert it to classes to evaluate it. As the values run between 0 and 1 we can do that by simple rounding so that any prediction over 0.5 is considered a present prediction, anything below is consider an absent predictions (other algorithms and functions exist for this conversion).\n\nbinary_predictions <- round(predictions$net.result,digits=0)\n\nWe can then put those binarised predictions into the confusionMatrix() function we used previously alongside the true values from the test_rows data (remembering to convert them to factors as they are not already).\n\nlibrary(caret)\nconfusionMatrix(factor(test_rows$Green_frogs), factor(binary_predictions))\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction  0  1\n         0 30  4\n         1 19 42\n                                          \n               Accuracy : 0.7579          \n                 95% CI : (0.6592, 0.8399)\n    No Information Rate : 0.5158          \n    P-Value [Acc > NIR] : 1.097e-06       \n                                          \n                  Kappa : 0.5201          \n                                          \n Mcnemar's Test P-Value : 0.003509        \n                                          \n            Sensitivity : 0.6122          \n            Specificity : 0.9130          \n         Pos Pred Value : 0.8824          \n         Neg Pred Value : 0.6885          \n             Prevalence : 0.5158          \n         Detection Rate : 0.3158          \n   Detection Prevalence : 0.3579          \n      Balanced Accuracy : 0.7626          \n                                          \n       'Positive' Class : 0               \n                                          \n\n\nWe can see the resulting network has about 60% sensitivity and 90% specificity, so missing a lot of real green frog sites.\nAs you can imagine the exact choice of the parameters can make a difference on final neural network performance. This is just one instance. In real analyses we would try out many different hidden layer and other parameter configurations and select the best performing at the the testing stage. That may then even move on to a further fine tuning stage, the development of machine learners is art as much as it is science.\n\n\n3.5.4 Examining the structure of the neural network\nThe neuralnet package we used here was chosen not least because it is straightforward and fast, but also because it is possible to get a plot of the created network.\n\nplot(nn)\n\n\n\n\n\n\nNote that the first layer corresponds to the input columns in the data with one neuron each, these then feed into the 3 hidden layers we specified of 20,15 and 5 layers each and finally the one neuron layer intergrating everything to give us the final prediction on whether we have a Green Frog.\nWe can see that the neural network we made is really complex. Even with just the small number of input features and hidden layers we have the combinations of weights and their effect into the next layer is too hard to understand (even if the plot were readable). This shows us how neural network structures become black boxes, we can’t be sure which of the input variables (or combinations of which) were most important in making the classifications.\n\n\n\n\n\n\nRoundup\n\n\n\n\nDeep Learners choose their own features\nDeep Learners like neural networks can work on patterns we dont explicitly state\nNeural network training means finding weights that give the best classifications\nNeural networks are black boxes and hard to interpret"
  },
  {
    "objectID": "05-deep_learning.html#references",
    "href": "05-deep_learning.html#references",
    "title": "3  Deep Learning",
    "section": "3.6 References",
    "text": "3.6 References\n\n\n\n\nBlachnik, Marcin, Marek Sołtysiak, and Dominika Dąbrowska. 2019. “Predicting Presence of Amphibian Species Using Features Obtained from GIS and Satellite Images.” ISPRS International Journal of Geo-Information 8 (3). https://doi.org/10.3390/ijgi8030123."
  },
  {
    "objectID": "prerequisites.html",
    "href": "prerequisites.html",
    "title": "Prerequisites",
    "section": "",
    "text": "There are no specific knowledge prerequisites for this book but it will be very helpful if you have read and worked through the Data Driven Visualisation, Data Exploration, Intro to Stats, Estimation Statistics and Bayesian Inference books and are familiar with R use."
  },
  {
    "objectID": "prerequisites.html#installing-r",
    "href": "prerequisites.html#installing-r",
    "title": "Prerequisites",
    "section": "Installing R",
    "text": "Installing R\nFollow this link and install the right version for your operating system https://www.stats.bris.ac.uk/R/"
  },
  {
    "objectID": "prerequisites.html#installing-rstudio",
    "href": "prerequisites.html#installing-rstudio",
    "title": "Prerequisites",
    "section": "Installing RStudio",
    "text": "Installing RStudio\nFollow this link and install the right version for your operating system https://www.rstudio.com/products/rstudio/download/"
  },
  {
    "objectID": "prerequisites.html#installing-r-packages-in-rstudio",
    "href": "prerequisites.html#installing-r-packages-in-rstudio",
    "title": "Prerequisites",
    "section": "Installing R packages in RStudio",
    "text": "Installing R packages in RStudio\n\nStandard packages\nIn the RStudio console, type\ninstall.packages(c(\"tidyverse\",\"factoextra\", \"patchwork\", \"ggdendro\", \"class\", \"caret\", \"e1071\",\"randomForest\", \"neuralnet\"))"
  },
  {
    "objectID": "r-fundamentals.html",
    "href": "r-fundamentals.html",
    "title": "R Fundamentals",
    "section": "",
    "text": "Questions:\n\n\nHow do I use R?\n\n\nObjectives:\n\n\nBecome familiar with R syntax\nUnderstand the concepts of objects and assignment\nGet exposed to a few functions\n\n\nKeypoints:\n\n\nR’s capabilities are provided by functions\nR users call functions and get results"
  },
  {
    "objectID": "r-fundamentals.html#working-with-r",
    "href": "r-fundamentals.html#working-with-r",
    "title": "R Fundamentals",
    "section": "Working with R",
    "text": "Working with R\nIn this workshop we’ll use R in the extremely useful RStudio software. For the most part we’ll work interactively, meaning we’ll type stuff straight into the R console in RStudio (Usually this is a window on the left or lower left) and get our results there too (usually in the console or in a window on the right).\nPanels like the ones below mimic the interaction with R and first show the thing to type into R, and below the calculated result from R.\nLet’s look at how R works by using it for it’s most basic job - as a calculator:\n\n 3 + 5\n\n[1] 8\n\n\n\n 12 * 2\n\n[1] 24\n\n\n\n 1 / 3\n\n[1] 0.3333333\n\n\n\n 12 * 2\n\n[1] 24\n\n\nFairly straightforward, we type in the expression and we get a result. That’s how this whole book will work, you type the stuff in, and get answers out. It’ll be easiest to learn if you go ahead and copy the examples one by one. Try to resist the urge to use copy and paste. Typing longhand really encourages you to look at what you’re entering.\nAs far as the R output itself goes, it’s really straightforward - its just the answer with a [1] stuck on the front. This [1] tells us how many items through the output we are. Often R will return long lists of numbers and it can be helpful to have this extra information."
  },
  {
    "objectID": "r-fundamentals.html#variables",
    "href": "r-fundamentals.html#variables",
    "title": "R Fundamentals",
    "section": "Variables",
    "text": "Variables\nWe can save the output of operations for later use by giving it a name using the assignment symbol <-. Read this symbol as ‘gets’, so x <- 5 reads as ‘x gets 5’. These names are called variables, because the value they are associated with can change.\nLet’s give five a name, x then refer to the value 5 by it’s name. We can then use the name in place of the value. In the jargon of computing we say we are assigning a value to a variable.\n\n x <- 5\n x\n\n[1] 5\n\n\n\n x * 2\n\n[1] 10\n\n\n\ny <- 3\nx * y\n\n[1] 15\n\n\nThis is of course of limited value with just numbers but is of great value when we have large datasets, as the whole thing can be referred to by the variable.\n\nUsing objects and functions\nAt the top level, R is a simple language with two types of thing: functions and objects. As a user you will use functions to do stuff, and get back objects as an answer. Functions are easy to spot, they are a name followed by a pair of brackets. A function like mean() is the function for calculating a mean. The options (or arguments) for the function go inside the brackets:\n\nsqrt(16)\n\n[1] 4\n\n\nOften the result from a function will be more complicated than a simple number object, often it will be a vector (simple list), like from the rnorm() function that returns lists of random numbers\n\nrnorm(100)\n\n  [1] -2.190766954  0.537022735 -0.116010514 -1.560745296  0.028779533\n  [6] -1.425429904  1.111585966  0.248913102 -2.075754584  0.757177110\n [11]  0.690348757  0.243983687 -1.591765336  0.468364805 -1.251468961\n [16]  0.698518619 -0.189285803 -1.758370241 -0.638288083  1.154637493\n [21]  0.428864484 -1.347127260  1.451894054  0.450746724 -0.723741722\n [26] -0.324188568  1.830271803  0.864434462 -0.768934409  1.126106141\n [31] -0.696272779 -0.284951563 -1.234207710  1.093579428 -0.114577940\n [36]  0.712145887  1.004189643  0.265143246  0.028947408  1.076234774\n [41] -0.747605773  0.009554738 -0.789166901  1.071191162 -2.012151483\n [46]  1.436974915  0.613660176 -0.190938138  2.613041244  0.861056972\n [51] -0.338193710 -0.549582807  0.505367946 -0.525644462 -1.073042219\n [56]  1.326179870 -0.287466323 -1.020468105 -0.231799357 -0.331719383\n [61] -1.466375952  0.026307834  1.319212804  0.925595920 -0.561223514\n [66]  1.384048293  0.187712007 -1.220866815  0.052390025  0.867202556\n [71] -0.405039029 -0.068809923 -0.628621519  1.218505801  0.558662267\n [76]  0.651044480 -0.197337521  0.612122559  0.318042536  0.669528351\n [81] -0.828523161  0.994058805 -0.141679847  1.038178399  0.215167781\n [86] -0.631739710 -1.084335597  2.029472283  2.037215530  0.831995462\n [91] -0.859813473  1.236423447  0.832792381 -0.293718559 -1.170246994\n [96]  0.910294469  0.472079841 -0.439304302 -0.052952212  0.690128756\n\n\nWe can combine objects, variables and functions to do more complex stuff in R, here’s how we get the mean of 100 random numbers.\n\nnumbers <- rnorm(100)\nmean(numbers)\n\n[1] 0.04125578\n\n\nHere we created a vector object with rnorm(100) and assigned it to the variable numbers. We than used the mean() function, passing it the variable numbers. The mean() function returned the mean of the hundred random numbers."
  },
  {
    "objectID": "r-fundamentals.html#dataframes",
    "href": "r-fundamentals.html#dataframes",
    "title": "R Fundamentals",
    "section": "Dataframes",
    "text": "Dataframes\nOne of the more common objects that R uses is a dataframe. The dataframe is a rectangular table-like object that contains data, think of it like a spreadsheet tab. Like the spreadsheet, the dataframe has rows and columns, the columns have names and the different columns can have different types of data in. Here’s a little one\n\n\n  names age     score\n1 Guido  24 41.942695\n2 Marty  45 10.389113\n3  Alan  11  8.199459\n\n\nUsually we get a dataframe by loading in data from an external source or as a result from functions, occasionally we’ll want to hand make one, which can be done with various functions, data.frame being the most common.\n\ndata.frame(\n  names = c(\"Guido\", \"Marty\", \"Alan\"),\n  age = c(24,45,11),\n  score = runif(3) * 100\n)"
  },
  {
    "objectID": "r-fundamentals.html#packages",
    "href": "r-fundamentals.html#packages",
    "title": "R Fundamentals",
    "section": "Packages",
    "text": "Packages\nMany of the tools we use in will come in R packages, little nuggets of code that group related functions together. Installing new packages can be done using the Packages pane of RStudio or the install.packages() function. When we wish to use that code we use the library() function\n\nlibrary(somepackage)"
  },
  {
    "objectID": "r-fundamentals.html#using-r-help",
    "href": "r-fundamentals.html#using-r-help",
    "title": "R Fundamentals",
    "section": "Using R Help",
    "text": "Using R Help\nR provides a command, called ? that will display the documentation for functions. For example ?mean will display the help for the mean() function.\n\n?mean\n\nAs in all programming languages the internal documentation in R is written with some assumption that the reader is familiar with the language. This can be a pain when you are starting out as the help will seem a bit obscure at times. Don’t worry about this, usually the Examples section will give you a good idea of how to use the function and as your experience grows then the more things will make more sense.\n\n\n\n\n\n\nRoundup\n\n\n\n* R is an excellent and powerful statistical computing environment\n\n\n\n\n\n\n\n\nFor you to do\n\n\n\nComplete the interactive tutorial online https://danmaclean.shinyapps.io/r-start"
  }
]